# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3-beta, etc.

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            runner: windows-latest
            binary_suffix: '.exe'
            build_tags: 'bundled'
            asset_name: 'timekeeper_bundled-windows-amd64.exe'
          - goos: windows
            goarch: arm64
            runner: windows-latest
            binary_suffix: '.exe'
            build_tags: ''
            asset_name: 'timekeeper-windows-arm64.exe'

          # Linux builds
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-linux-amd64'
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-linux-arm64'

          # macOS builds
          - goos: darwin
            goarch: amd64
            runner: macos-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-macos-amd64'
          - goos: darwin
            goarch: arm64
            runner: macos-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-macos-arm64'

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    #https://github.com/actions/runner-images/issues/8584
    - name: Install winget on Windows
      if: ${{ matrix.goos == 'windows' && matrix.goarch == 'amd64' }}
      shell:  pwsh
      run: |
        $progressPreference = 'silentlyContinue'
        Write-Information "Downloading WinGet and its dependencies..."
        Invoke-WebRequest -Uri https://aka.ms/getwinget -OutFile Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
        Invoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
        Invoke-WebRequest -Uri https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.7.3/Microsoft.UI.Xaml.2.7.x64.appx -OutFile Microsoft.UI.Xaml.2.7.x64.appx
        Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx
        Add-AppxPackage Microsoft.UI.Xaml.2.7.x64.appx
        Add-AppxPackage Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle

    # Windows only: install ExifTool with winget
    - name: Install ExifTool on Windows
      if: ${{ matrix.goos == 'windows' && matrix.goarch == 'amd64' }}
      shell: pwsh
      run: |
        Write-Host "Installing ExifTool via winget..."
        winget install --id=ExifTool.ExifTool -e --accept-package-agreements --accept-source-agreements

        $installPath = "$env:LOCALAPPDATA\Programs\ExifTool"
        if (-Not (Test-Path $installPath)) {
            Write-Error "ExifTool installation not found at $installPath"
            exit 1
        }

        # Prepare directories for bundling
        New-Item -ItemType Directory -Force -Path bin/windows
        New-Item -ItemType Directory -Force -Path bin/windows/exiftool_files

        # Copy main exe
        Copy-Item "$installPath\ExifTool.exe" "bin/windows/exiftool.exe" -Force

        # Copy supporting files
        Copy-Item "$installPath\exiftool_files\*" "bin/windows/exiftool_files\" -Recurse -Force

    # Build Go binary
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        if [ -n "${{ matrix.build_tags }}" ]; then
          go build -tags "${{ matrix.build_tags }}" \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ${{ matrix.asset_name }} .
        else
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ${{ matrix.asset_name }} .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}
