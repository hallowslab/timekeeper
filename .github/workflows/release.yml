# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.2.3-beta, etc.

jobs:
  build:
    strategy:
      matrix:
        include:
          # Windows builds
          - goos: windows
            goarch: amd64
            runner: windows-latest
            binary_suffix: '.exe'
            build_tags: 'bundled'
            asset_name: 'timekeeper_bundled-windows-amd64.exe'
          - goos: windows
            goarch: arm64
            runner: windows-latest
            binary_suffix: '.exe'
            build_tags: ''
            asset_name: 'timekeeper-windows-arm64.exe'

          # Linux builds
          - goos: linux
            goarch: amd64
            runner: ubuntu-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-linux-amd64'
          - goos: linux
            goarch: arm64
            runner: ubuntu-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-linux-arm64'

          # macOS builds
          - goos: darwin
            goarch: amd64
            runner: macos-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-macos-amd64'
          - goos: darwin
            goarch: arm64
            runner: macos-latest
            binary_suffix: ''
            build_tags: ''
            asset_name: 'timekeeper-macos-arm64'

    runs-on: ${{ matrix.runner }}

    steps:
    - uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.25'

    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Download and prepare ExifTool for Windows
      if: matrix.goos == 'windows'
      shell: pwsh
      run: |
        # Download the ExifTool ZIP
        $url = "https://downloads.sourceforge.net/project/exiftool/exiftool/13.34/exiftool-13.34_64.zip"
        $output = "exiftool.zip"
        # Retry download up to 3 times
        for ($i=0; $i -lt 3; $i++) {
            try {
                Invoke-WebRequest -Uri $url -OutFile $output -MaximumRedirection 5
                break
            } catch {
                Write-Host "Download failed, retrying..."
                Start-Sleep -Seconds 5
            }
        }

        # Extract ZIP to temporary folder
        Expand-Archive -Path $output -DestinationPath exiftool -Force

        # Ensure target directories exist
        New-Item -ItemType Directory -Force -Path bin/windows
        New-Item -ItemType Directory -Force -Path bin/windows/exiftool_files

        # Move the main exe (rename to exiftool.exe)
        Move-Item -Path "exiftool\exiftool(-k).exe" -Destination "bin/windows/exiftool.exe" -Force

        # Copy all supporting files (exiftool_files folder)
        Copy-Item -Path "exiftool\exiftool_files\*" -Destination "bin/windows/exiftool_files" -Recurse -Force


    - name: Build binary (Linux/macOS)
      if: matrix.goos != 'windows'
      run: |
        if [ -n "${{ matrix.build_tags }}" ]; then
          go build -tags "${{ matrix.build_tags }}" \
            -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ${{ matrix.asset_name }} .
        else
          go build -ldflags="-s -w -X main.version=${{ steps.version.outputs.VERSION }}" \
            -o ${{ matrix.asset_name }} .
        fi

    - name: Build binary (Windows)
      if: matrix.goos == 'windows'
      shell: pwsh
      run: |
        if ($env:BUILD_TAGS -ne "") {
            go build -tags $env:BUILD_TAGS -ldflags "-s -w -X main.version=$env:VERSION" -o $env:ASSET_NAME .
        } else {
            go build -ldflags "-s -w -X main.version=$env:VERSION" -o $env:ASSET_NAME .
        }
      env:
        VERSION: ${{ steps.version.outputs.VERSION }}
        ASSET_NAME: ${{ matrix.asset_name }}
        BUILD_TAGS: ${{ matrix.build_tags }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}
